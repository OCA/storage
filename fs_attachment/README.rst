============================
Base Attachment Object Store
============================

.. !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
   !! This file is generated by oca-gen-addon-readme !!
   !! changes will be overwritten.                   !!
   !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

.. |badge1| image:: https://img.shields.io/badge/maturity-Beta-yellow.png
    :target: https://odoo-community.org/page/development-status
    :alt: Beta
.. |badge2| image:: https://img.shields.io/badge/licence-AGPL--3-blue.png
    :target: http://www.gnu.org/licenses/agpl-3.0-standalone.html
    :alt: License: AGPL-3
.. |badge3| image:: https://img.shields.io/badge/github-OCA%2Fstorage-lightgray.png?logo=github
    :target: https://github.com/OCA/storage/tree/16.0/fs_attachment
    :alt: OCA/storage
.. |badge4| image:: https://img.shields.io/badge/weblate-Translate%20me-F47D42.png
    :target: https://translation.odoo-community.org/projects/storage-16-0/storage-16-0-fs_attachment
    :alt: Translate me on Weblate
.. |badge5| image:: https://img.shields.io/badge/runbot-Try%20me-875A7B.png
    :target: https://runbot.odoo-community.org/runbot/275/16.0
    :alt: Try me on Runbot

|badge1| |badge2| |badge3| |badge4| |badge5| 

In some cases, you need to store attachment in another system that the Odoo's
filestore. For example, when your deployment is based on a multi-server
architecture to ensure redundancy and scalability, your attachments must
be stored in a way that they are accessible from all the servers. In this
way, you can use a shared storage system like NFS or a cloud storage like
S3 compliant storage, or....

This addon extend the storage mechanism of Odoo's attachments to allow
you to store them in any storage filesystem supported by the Python
library `fsspec <https://filesystem-spec.readthedocs.io/en/latest/>`_ and made
available via the `fs_storage` addon.

In contrast to Odoo, when a file is stored into an external storage, this
addon ensures that the filename keeps its meaning (In odoo the filename
into the filestore is the file content checksum). Concretely the filename
is based on the pattern:
'<name-without-extension>-<attachment-id>-<version>.<extension>'

Last but not least, this addon adds on the attachments 2 new fields to use
to retrieve the file content from a URL:

* ``Internal URL``: URL to retrieve the file content from the Odoo's
  filestore.
* ``Filesystem URL``: URL to retrieve the file content from the external
  storage.

.. note::

   The internal URL is always available, but the filesystem URL is only
   available when the attachment is stored in an external storage.
   Particular attention has been paid to limit as much as possible the consumption
   of resources necessary to serve via Odoo the content stored in an external
   filesystem. The implementation is based on an end-to-end streaming of content
   between the external filesystem and the Odoo client application.

**Table of contents**

.. contents::
   :local:

Usage
=====

Configuration
~~~~~~~~~~~~~

The configuration is done through the creation of a filesytem storage record
into odoo. To create a new storage, go to the menu
``Settings > Technical > FS Storage`` and click on ``Create``.

In addition to the common fields available to configure a storage, specifics
fields are available under the section 'Attachment' to configure the way
attachments will be stored in the filesystem.

* ``Optimizes Directory Path``: This option is useful if you need to prevent
  having too many files in a single directory. It will create a directory
  structure based on the attachment's checksum (with 2 levels of depth)
  For example, if the checksum is ``123456789``, the file will be stored in the
  directory  ``/path/to/storage/12/34/my_file-1-0.txt``.
* ``Autovacuum GC``: This is used to automatically remove files from the filesystem
  when it's no longer referenced in Odoo. Some storage backends (like S3) may
  charge you for the storage of files, so it's important to remove them when
  they're no longer needed. In some cases, this option is not desirable, for
  example if you're using a storage backend to store images shared with others
  systems (like your website) and you don't want to remove the files from the
  storage while they're still referenced into the others systems.
  This mechanism is based on a ``fs.file.gc`` model used to collect the files
  to remove. This model is automatically populated by the ``ir.attachment``
  model when a file is removed from the database. If you disable this option,
  you'll have to manually take care of the records in the ``fs.file.gc`` for
  your filesystem storage.
* ``Use As Default For Attachment``: This options allows you to declare the storage
  as the default one for attachments. If you have multiple filesystem storage
  configured, you can choose which one will be used by default for attachments.
  Once activated, attachments created without specifying a storage will be
  stored in this default storage.
* ``Force DB For Default Attachment Rules``: This option is useful if you want to
  force the storage of some attachments in the database, even if you have a
  default filesystem storage configured. This is specially useful when you're
  using a storage backend like S3, where the latency of the network can be
  high. This option is a JSON field that allows you to define the mimetypes and
  the size limit below which the attachments will be stored in the database.

  Small images (128, 256) are used in Odoo in list / kanban views. We
  want them to be fast to read.
  They are generally < 50KB (default configuration) so they don't take
  that much space in database, but they'll be read much faster than from
  the object storage.

  The assets (application/javascript, text/css) are stored in database
  as well whatever their size is:

  * a database doesn't have thousands of them
  * of course better for performance
  * better portability of a database: when replicating a production
    instance for dev, the assets are included

  The default configuration is:

   {"image/": 51200, "application/javascript": 0, "text/css": 0}

   Where the key is the beginning of the mimetype to configure and the
   value is the limit in size below which attachments are kept in DB.
   0 means no limit.

  Default configuration means:

  * images mimetypes (image/png, image/jpeg, ...) below 50KB are
    stored in database
  * application/javascript are stored in database whatever their size
  * text/css are stored in database whatever their size

  This option is only available on the filesystem storage that is used
  as default for attachments.

Another key feature of this module is the ability to get access to the attachments
from URLs.

* ``Base URL``: This is the base URL used to access the attachments from the
  filesystem storage itself.
* ``Is Directory Path In URL``: Normally the directory patch configured on the storage
  is not included in the URL. If you want to include it, you can activate this option.

Tips & Tricks
~~~~~~~~~~~~~

* When working in multi staging environments, the management of the attachments
  can be tricky. For example, if you have a production instance and a staging
  instance based on a backup of the production environment, you may want to have
  the attachments shared between the two instances BUT you don't want to have
  one instance removing or modifying the attachments of the other instance.

  To do so, you can configure the same filesystem storage on both instances and
  use a different directory path. (For S3 storage, directory path is the bucket
  name). When a file is written in the filesystem storage, it's always written into
  the directory path configured on the storage and full path of the file is stored
  in the database. When reading a file, it's always read from the full path stored
  in the database. So if you have two instances using the same storage with different
  directory paths, files written in each instance will be stored in different
  directories but be accessible from the other instance. A check is also done when
  an attachment is removed to ensure that only files stored in the current directory
  path are removed.

Bug Tracker
===========

Bugs are tracked on `GitHub Issues <https://github.com/OCA/storage/issues>`_.
In case of trouble, please check there if your issue has already been reported.
If you spotted it first, help us smashing it by providing a detailed and welcomed
`feedback <https://github.com/OCA/storage/issues/new?body=module:%20fs_attachment%0Aversion:%2016.0%0A%0A**Steps%20to%20reproduce**%0A-%20...%0A%0A**Current%20behavior**%0A%0A**Expected%20behavior**>`_.

Do not contact contributors directly about support or help with technical issues.

Credits
=======

Authors
~~~~~~~

* Camptocamp
* ACSONE SA/NV

Contributors
~~~~~~~~~~~~

Thierry Ducrest <thierry.ducrest@camptocamp.com>
Guewen Baconnier <guewen.baconnier@camptocamp.com>
Julien Coux <julien.coux@camptocamp.com>
Akim Juillerat <akim.juillerat@camptocamp.com>
Thomas Nowicki <thomas.nowicki@camptocamp.com>
Vincent Renaville <vincent.renaville@camptocamp.com>
Denis Leemann <denis.leemann@camptocamp.com>
Patrick Tombez <patrick.tombez@camptocamp.com>
Don Kendall <kendall@donkendall.com>
Stephane Mangin <stephane.mangin@camptocamp.com>
Laurent Mignon <laurent.mignon@acsone.eu>

Maintainers
~~~~~~~~~~~

This module is maintained by the OCA.

.. image:: https://odoo-community.org/logo.png
   :alt: Odoo Community Association
   :target: https://odoo-community.org

OCA, or the Odoo Community Association, is a nonprofit organization whose
mission is to support the collaborative development of Odoo features and
promote its widespread use.

This module is part of the `OCA/storage <https://github.com/OCA/storage/tree/16.0/fs_attachment>`_ project on GitHub.

You are welcome to contribute. To learn how please visit https://odoo-community.org/page/Contribute.
